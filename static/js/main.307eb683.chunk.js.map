{"version":3,"sources":["components/Title.jsx","components/Form.jsx","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","state","react_default","a","createElement","className","Component","Form","props","onSubmit","getWeatherData","class","for","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","undefined","_callee","ev","API_URL","weatherData","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","t0","stop","components_Title","components_Form","this","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.307eb683.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Title extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"jumbotron\">\r\n          <h1 className=\"text-center\">Weather App</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form className=\"form-horizontal\" onSubmit={props.getWeatherData}>\r\n      <div class=\"form-group\">\r\n        <label class=\"control-label col-sm-2\" for=\"city\">\r\n          City:{\" \"}\r\n        </label>\r\n        <div class=\"col-sm-10\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"city\"\r\n            placeholder=\"City...\"\r\n            className=\"form-control\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label class=\"control-label col-sm-2\" for=\"country\">\r\n          Country:{\" \"}\r\n        </label>\r\n        <div class=\"col-sm-10\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"country\"\r\n            placeholder=\"Country...\"\r\n            className=\"form-control\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <div class=\"col-sm-offset-2 col-sm-10\">\r\n          <button type=\"submit\" class=\"btn btn-default\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <ul className=\"list-group\">\r\n        {props.city && props.country && (\r\n          <li className=\"list-group-item\">\r\n            {\" \"}\r\n            Location: {props.city}, {props.country}\r\n          </li>\r\n        )}\r\n\r\n        {props.temperature && (\r\n          <li className=\"list-group-item\">\r\n            {\" \"}\r\n            Temperature: {props.temperature}{\" \"}\r\n          </li>\r\n        )}\r\n\r\n        {props.humidity && (\r\n          <li className=\"list-group-item\">\r\n            {\" \"}\r\n            Humidity:\r\n            {props.humidity}\r\n          </li>\r\n        )}\r\n\r\n        {props.description && (\r\n          <li className=\"list-group-item\">\r\n            {\" \"}\r\n            Conditions:\r\n            {props.description}\r\n          </li>\r\n        )}\r\n\r\n        {props.error && (\r\n          <li className=\"list-group-item list-group-item-danger\">\r\n            {props.error}\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport { async } from \"q\";\n\nconst API_KEY = \"f5500d5f8c2460c7be651413d0c1b66d\";\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n  getWeatherData = async ev => {\n    try {\n      ev.preventDefault(); //Prevent the default behaviour of this component when the button is presses\n      const city = ev.target.elements.city.value;\n      const country = ev.target.elements.country.value;\n      const API_URL = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}uk&mode=json&appid=${API_KEY}&units=metric`\n      );\n      const weatherData = await API_URL.json();\n\n      if (city && country) {\n        this.setState({\n          temperature: weatherData.main.temp,\n          city: weatherData.name,\n          country: weatherData.sys.country,\n          humidity: weatherData.main.humidity,\n          description: weatherData.weather[0].description,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"Please enter the city and country\"\n        });\n      }\n    } catch (e) {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Data Not found. Something is wrong with the request.\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <Title />\n        <Form getWeatherData={this.getWeatherData} />\n        <Weather\n          temperature={this.state.temperature}\n          humidity={this.state.humidity}\n          city={this.state.city}\n          country={this.state.country}\n          description={this.state.description}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}